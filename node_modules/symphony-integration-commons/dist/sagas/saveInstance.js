'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveInstance = saveInstance;

var _effects = require('redux-saga/effects');

var _actions = require('../actions');

var _apiCalls = require('./apiCalls');

var _marked = [saveInstance].map(regeneratorRuntime.mark); /* eslint-disable no-debugger */


function saveInstance() {
  var imStream, state, instance, stream, response;
  return regeneratorRuntime.wrap(function saveInstance$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          imStream = void 0;
          _context.prev = 1;
          _context.next = 4;
          return (0, _effects.put)({ type: _actions.CALL_SAVE_INSTANCE });

        case 4:
          _context.next = 6;
          return (0, _effects.select)();

        case 6:
          state = _context.sent;
          instance = state.instance;

          if (!(instance.streamType === 'IM')) {
            _context.next = 15;
            break;
          }

          _context.next = 11;
          return (0, _effects.call)(_apiCalls.createIM);

        case 11:
          imStream = _context.sent;

          instance.streams.push(imStream.id);
          _context.next = 25;
          break;

        case 15:
          if (!(instance.streamType === 'CHATROOM')) {
            _context.next = 25;
            break;
          }

          if (!(instance.streams.length > 0)) {
            _context.next = 25;
            break;
          }

          _context.t0 = regeneratorRuntime.keys(instance.streams);

        case 18:
          if ((_context.t1 = _context.t0()).done) {
            _context.next = 25;
            break;
          }

          stream = _context.t1.value;

          if (!instance.streams[stream]) {
            _context.next = 23;
            break;
          }

          _context.next = 23;
          return (0, _effects.call)(_apiCalls.addMembership, instance.streams[stream]);

        case 23:
          _context.next = 18;
          break;

        case 25:
          instance.creatorId = state.userId;
          _context.next = 28;
          return (0, _effects.call)(_apiCalls.saveInstance, state);

        case 28:
          response = _context.sent;

          instance.instanceId = response.instanceId;
          instance.lastPosted = response.lastModifiedDate;
          _context.next = 33;
          return (0, _effects.put)({ type: _actions.SUCCESSFULLY_CREATED, instance: instance });

        case 33:
          _context.next = 35;
          return (0, _effects.call)(_apiCalls.sendWelcomeMessage, instance);

        case 35:
          _context.next = 41;
          break;

        case 37:
          _context.prev = 37;
          _context.t2 = _context['catch'](1);
          _context.next = 41;
          return (0, _effects.put)({ type: _actions.FAILED_OPERATION });

        case 41:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this, [[1, 37]]);
}