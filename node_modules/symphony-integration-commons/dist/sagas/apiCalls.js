'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendWelcomeMessage = exports.removeInstance = exports.editInstance = exports.saveInstance = exports.createIM = exports.addMembership = exports.getList = exports.getInstructions = exports.getParams = exports.getRooms = exports.getUserId = exports.setInstance = exports.getInstance = exports.getAppName = undefined;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _utils = require('../js/utils.service');

var _config = require('../js/config.service');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configurationId = _utils.Utils.getParameterByName('configurationId');
var botUserId = _utils.Utils.getParameterByName('botUserId');
var appName = _utils.Utils.getParameterByName('id');
var baseUrl = window.location.protocol + '//' + window.location.hostname + '/integration';
var baseWebHookURL = baseUrl + '/v1/whi/' + appName + '/' + configurationId;

var getAppName = exports.getAppName = function getAppName() {
  return appName;
};

var getInstance = exports.getInstance = function getInstance() {
  return {
    instanceId: null,
    name: '',
    configurationId: configurationId,
    creatorId: null,
    streamType: 'IM',
    lastPosted: null,
    baseWebHookURL: baseWebHookURL,
    postingLocationRooms: [],
    streams: [],
    loading: false
  };
};

var setInstance = exports.setInstance = function setInstance(_instance) {
  return {
    instanceId: _instance.instanceId,
    name: _instance.name,
    configurationId: configurationId,
    streamType: _instance.streamType,
    lastPosted: _instance.lastPosted,
    baseWebHookURL: _instance.baseWebHookURL,
    postingLocationRooms: _instance.postingLocationRooms.slice()
  };
};

var getUserId = exports.getUserId = function getUserId() {
  var extendedUserService = SYMPHONY.services.subscribe('extended-user-service');
  return extendedUserService.getUserId().then(function (data) {
    return data;
  });
};

var getRooms = exports.getRooms = function getRooms() {
  var extendedUserService = SYMPHONY.services.subscribe('extended-user-service');
  return extendedUserService.getRooms().then(function (data) {
    return _utils.Utils.getUserRooms(data);
  });
};

var getParams = exports.getParams = function getParams() {
  return _config2.default.getParams();
};

var getInstructions = exports.getInstructions = function getInstructions() {
  return _config2.default.getInstructions();
};

var getList = exports.getList = function getList() {
  var integrationConfService = SYMPHONY.services.subscribe('integration-config');
  return integrationConfService.getConfigurationInstanceList(configurationId).then(function (data) {
    return _utils.Utils.normalizeInstanceList(data);
  });
};

var addMembership = exports.addMembership = function addMembership(stream) {
  var streamService = SYMPHONY.services.subscribe('stream-service');
  return streamService.addRoomMembership(stream, botUserId);
};

var createIM = exports.createIM = function createIM() {
  var streamService = SYMPHONY.services.subscribe('stream-service');
  return streamService.createIM([botUserId]);
};

var saveInstance = exports.saveInstance = function saveInstance(state) {
  // build Optional Properties
  var opStreams = '';
  state.instance.streams.map(function (stream, idx) {
    if (idx === 0) {
      opStreams += '"' + stream + '"';
    } else {
      opStreams += ', "' + stream + '"';
    }
  });
  var optionalProperties = '{"owner": "' + state.userId + '", "streams": [' + opStreams + '], "streamType": "' + state.instance.streamType + '"}';
  // build payload
  var payload = {
    configurationId: configurationId,
    name: state.instance.name,
    creatorId: state.userId,
    optionalProperties: optionalProperties
  };
  // save the instance
  var integrationConfigService = SYMPHONY.services.subscribe('integration-config');
  return integrationConfigService.createConfigurationInstance(configurationId, payload);
};

var editInstance = exports.editInstance = function editInstance(state) {
  // build Optional Properties
  var opStreams = '';
  state.instance.streams.map(function (stream, idx) {
    if (idx === 0) {
      opStreams += '"' + stream + '"';
    } else {
      opStreams += ', "' + stream + '"';
    }
  });
  var optionalProperties = '{"owner": "' + state.userId + '", "streams": [' + opStreams + '], "streamType": "' + state.instance.streamType + '"}';
  // build payload
  var payload = {
    instanceId: state.instance.instanceId,
    configurationId: configurationId,
    name: state.instance.name,
    optionalProperties: optionalProperties
  };
  var integrationConfigService = SYMPHONY.services.subscribe('integration-config');
  return integrationConfigService.updateConfigurationInstanceById(configurationId, state.instance.instanceId, payload);
};

var removeInstance = exports.removeInstance = function removeInstance(state) {
  var integrationConfService = SYMPHONY.services.subscribe('integration-config');
  return integrationConfService.deactivateConfigurationInstanceById(configurationId, state.instanceId);
};

var sendWelcomeMessage = exports.sendWelcomeMessage = function sendWelcomeMessage(state) {
  var url = baseWebHookURL + '/' + state.instanceId + '/welcome';
  var payload = {
    streams: state.streams
  };
  _axios2.default.post(url, {
    params: {
      data: JSON.stringify(payload)
    }
  }).then(function (data) {
    return data;
  }).catch(function (err) {
    return err;
  });
};