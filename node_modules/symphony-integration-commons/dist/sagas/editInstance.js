'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editInstance = editInstance;

var _effects = require('redux-saga/effects');

var _apiCalls = require('./apiCalls');

var _marked = [editInstance].map(regeneratorRuntime.mark);

function editInstance() {
  var state, stream;
  return regeneratorRuntime.wrap(function editInstance$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return (0, _effects.select)();

        case 3:
          state = _context.sent;
          _context.next = 6;
          return (0, _effects.call)(_apiCalls.setInstance, state.instance);

        case 6:
          if (!(state.instance.streamType === 'CHATROOM')) {
            _context.next = 23;
            break;
          }

          if (!(state.instance.streams.length > 0)) {
            _context.next = 23;
            break;
          }

          _context.t0 = regeneratorRuntime.keys(state.instance.streams);

        case 9:
          if ((_context.t1 = _context.t0()).done) {
            _context.next = 23;
            break;
          }

          stream = _context.t1.value;

          if (!state.instance.streams[stream]) {
            _context.next = 21;
            break;
          }

          _context.prev = 12;
          _context.next = 15;
          return (0, _effects.call)(_apiCalls.addMembership, state.instance.streams[stream]);

        case 15:
          _context.next = 21;
          break;

        case 17:
          _context.prev = 17;
          _context.t2 = _context['catch'](12);
          _context.next = 21;
          return (0, _effects.put)({ type: 'ADD_MEMBER_SHIP_FAILED', error: _context.t2 });

        case 21:
          _context.next = 9;
          break;

        case 23:
          _context.next = 25;
          return (0, _effects.call)(_apiCalls.editInstance, state);

        case 25:
          _context.next = 27;
          return (0, _effects.put)({ type: 'SUCCESSFULLY_UPDATED' });

        case 27:
          _context.next = 35;
          break;

        case 29:
          _context.prev = 29;
          _context.t3 = _context['catch'](0);
          _context.next = 33;
          return (0, _effects.put)({ type: 'FETCH_FAILED', error: _context.t3 });

        case 33:
          _context.next = 35;
          return (0, _effects.put)({ type: 'FAILED_OPERATION' });

        case 35:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this, [[0, 29], [12, 17]]);
}