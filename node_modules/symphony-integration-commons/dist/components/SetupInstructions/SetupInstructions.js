'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

require('../../styles/main.less');

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SetupInstructions = function (_Component) {
  _inherits(SetupInstructions, _Component);

  function SetupInstructions(props) {
    _classCallCheck(this, SetupInstructions);

    var _this = _possibleConstructorReturn(this, (SetupInstructions.__proto__ || Object.getPrototypeOf(SetupInstructions)).call(this, props));

    _this.state = {
      height: 0,
      hidden: true
    };
    _this.content = null;
    _this.contentHeight = 0;
    _this.updateHeight = _this.updateHeight.bind(_this);
    _this.showHideInstructions = _this.showHideInstructions.bind(_this);
    return _this;
  }

  _createClass(SetupInstructions, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var content = this.content.childNodes[0];
      this.contentHeight = content.offsetHeight;
      if (this.contentHeight <= 70) {
        content.className += ' wrap';
      }
      this.updateHeight();
    }
  }, {
    key: 'updateHeight',
    value: function updateHeight() {
      this.setState({
        height: this.contentHeight
      });
    }
  }, {
    key: 'showHideInstructions',
    value: function showHideInstructions() {
      if (this.state.hidden) {
        this.content.style.maxHeight = '312.5rem';
      } else {
        this.content.style.maxHeight = '4.375rem';
      }

      this.setState({
        hidden: !this.state.hidden
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        { className: 'wrapper setup-instructions', ref: function ref(wrapper) {
            _this2.content = wrapper;
          } },
        this.state.height > 70 && _react2.default.createElement(
          'div',
          { className: 'setup-instructions-header' },
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h1',
              null,
              'Setup Instructions'
            ),
            _react2.default.createElement(
              'p',
              null,
              'Here are the steps necessary to add the ' + this.props.appName + ' integration.'
            )
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'button',
              { onClick: this.showHideInstructions, className: 'show-hide-instructions' },
              _react2.default.createElement('i', {
                className: this.state.hidden ? 'fa fa-chevron-down' : 'fa fa-chevron-up',
                'aria-hidden': 'true'
              })
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'setup-instructions-content' },
          this.props.template
        )
      );
    }
  }]);

  return SetupInstructions;
}(_react.Component);

SetupInstructions.propTypes = {
  appName: _react.PropTypes.string,
  template: _react.PropTypes.node
};

var mapStateToProps = function mapStateToProps(state) {
  return {
    appName: state.appParams.appName,
    template: state.appInstructions
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps)(SetupInstructions);
// export default SetupInstructions;