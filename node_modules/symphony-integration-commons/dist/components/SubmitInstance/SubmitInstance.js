'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubmitInstance = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _actions = require('../../actions');

require('../../styles/main.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SubmitInstance = exports.SubmitInstance = function (_Component) {
  _inherits(SubmitInstance, _Component);

  function SubmitInstance(props) {
    _classCallCheck(this, SubmitInstance);

    var _this = _possibleConstructorReturn(this, (SubmitInstance.__proto__ || Object.getPrototypeOf(SubmitInstance)).call(this, props));

    _this.state = {
      label: 'Add',
      requireNameVisible: false,
      requireRoomsVisible: false
    };
    _this.dispatchActions = _this.dispatchActions.bind(_this);
    _this.onCancel = _this.onCancel.bind(_this);
    _this.validateFields = _this.validateFields.bind(_this);
    return _this;
  }

  _createClass(SubmitInstance, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      switch (this.props.operation) {
        case _actions.operations.UPDATE:
          this.setState({
            label: 'Update'
          });
          break;
        case _actions.operations.REMOVE:
          this.setState({
            label: 'Remove'
          });
          break;
        default:
          this.setState({
            label: 'Add'
          });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.saved !== nextProps.saved) {
        if (nextProps.saved) {
          if (nextProps.operation === 'CREATE') {
            _reactRouter.hashHistory.push('/instance-created');
          } else if (nextProps.operation === 'REMOVE' || nextProps.operation === 'UPDATE') {
            _reactRouter.hashHistory.push('/');
          }
        } else {
          _reactRouter.hashHistory.push('/');
        }
      }
    }
  }, {
    key: 'onCancel',
    value: function onCancel() {
      this.props.resetMessage();
      _reactRouter.hashHistory.push('/');
    }
  }, {
    key: 'dispatchActions',
    value: function dispatchActions() {
      switch (this.props.operation) {
        case 'CREATE':
          this.props.saveInstance();
          break;
        case 'UPDATE':
          this.props.editInstance();
          break;
        case 'REMOVE':
          this.props.removeInstance();
          break;
        default:
          this.props.saveInstance();
      }
    }
  }, {
    key: 'validateFields',
    value: function validateFields() {
      if (this.props.operation !== _actions.operations.REMOVE) {
        if (this.props.name === '') {
          this.props.showRequireName();
        } else {
          this.props.hideRequireName();
        }

        if (this.props.streamType === 'CHATROOM') {
          if (this.props.postingRooms.length === 0) {
            this.props.showRequireRooms();
          } else {
            this.props.hideRequireRooms();
          }
        } else {
          this.props.hideRequireRooms();
        }

        if (this.props.name === '' || this.props.streamType === 'CHATROOM' && this.props.postingRooms.length === 0) {
          return;
        }
      }

      this.dispatchActions();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'submit-container' },
        _react2.default.createElement(
          'button',
          { className: 'button cancel-link', onClick: this.onCancel },
          'Cancel'
        ),
        _react2.default.createElement(
          'button',
          { className: 'button', onClick: this.validateFields },
          this.state.label
        )
      );
    }
  }]);

  return SubmitInstance;
}(_react.Component);

SubmitInstance.propTypes = {
  saveInstance: _react.PropTypes.func.isRequired,
  editInstance: _react.PropTypes.func.isRequired,
  removeInstance: _react.PropTypes.func.isRequired,
  resetMessage: _react.PropTypes.func.isRequired,
  showRequireName: _react.PropTypes.func.isRequired,
  showRequireRooms: _react.PropTypes.func.isRequired,
  hideRequireName: _react.PropTypes.func.isRequired,
  hideRequireRooms: _react.PropTypes.func.isRequired,
  saved: _react.PropTypes.bool,
  name: _react.PropTypes.string,
  streamType: _react.PropTypes.string,
  postingRooms: _react.PropTypes.arrayOf(_react.PropTypes.string),
  operation: _react.PropTypes.string
};

SubmitInstance.defaultProps = {
  saved: false
};

exports.default = SubmitInstance;