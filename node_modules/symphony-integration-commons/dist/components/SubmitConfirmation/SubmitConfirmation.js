'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _actions = require('../../actions');

require('../../styles/main.less');

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SubmitConfirmation = function (_Component) {
  _inherits(SubmitConfirmation, _Component);

  function SubmitConfirmation() {
    _classCallCheck(this, SubmitConfirmation);

    return _possibleConstructorReturn(this, (SubmitConfirmation.__proto__ || Object.getPrototypeOf(SubmitConfirmation)).apply(this, arguments));
  }

  _createClass(SubmitConfirmation, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.loading !== nextProps.loading) {
        if (nextProps.loading) {
          _reactRouter.hashHistory.push('/');
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        { className: 'wrapper' },
        _react2.default.createElement(
          'div',
          { className: 'submit-container' },
          _react2.default.createElement(
            'button',
            { className: 'button', onClick: function onClick() {
                _this2.props.callSubmitDone();
              } },
            'Done'
          )
        )
      );
    }
  }]);

  return SubmitConfirmation;
}(_react.Component);

SubmitConfirmation.propTypes = {
  callSubmitDone: _react.PropTypes.func.isRequired,
  loading: _react.PropTypes.bool.isRequired
};

var mapStateToProps = function mapStateToProps(state) {
  return {
    loading: state.instanceList.loading
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    callSubmitDone: function callSubmitDone() {
      dispatch((0, _actions.submitDone)());
    }
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(SubmitConfirmation);