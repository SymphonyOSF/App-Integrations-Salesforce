'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./styles/styles.less');

var _utils = require('../../js/utils.service');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataRow = function (_Component) {
  _inherits(DataRow, _Component);

  function DataRow(props) {
    _classCallCheck(this, DataRow);

    var _this = _possibleConstructorReturn(this, (DataRow.__proto__ || Object.getPrototypeOf(DataRow)).call(this, props));

    _this.state = {
      enableCopy: true
    };
    _this.webhookurl = _this.props.instance.baseWebHookURL + '/' + _this.props.instance.instanceId;
    _this.onCopyURL = _this.onCopyURL.bind(_this);
    _this.onClickEdit = _this.onClickEdit.bind(_this);
    _this.onClickRemove = _this.onClickRemove.bind(_this);
    return _this;
  }

  _createClass(DataRow, [{
    key: 'onCopyURL',
    value: function onCopyURL(e) {
      var _this2 = this;

      var target = e.target;
      this.setState({
        enableCopy: false
      });
      e.preventDefault();

      // callback function called from copyToClipboard
      var cb = function cb(value) {
        if (value) {
          _this2.setState({
            enableCopy: true
          });
        }
      };

      (0, _utils.copyToClipboard)(target, cb);
    }
  }, {
    key: 'onClickEdit',
    value: function onClickEdit(e) {
      e.preventDefault();
      this.props.onClickEdit(this.props.instance);
    }
  }, {
    key: 'onClickRemove',
    value: function onClickRemove(e) {
      e.preventDefault();
      this.props.onClickRemove(this.props.instance);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'tr',
        null,
        _react2.default.createElement(
          'td',
          null,
          _react2.default.createElement(
            'span',
            null,
            this.props.instance.name
          )
        ),
        _react2.default.createElement(
          'td',
          null,
          this.props.instance.streamType === 'IM' ? _react2.default.createElement(
            'span',
            null,
            'One on one chat with ',
            this.props.appName
          ) : _react2.default.createElement(
            'ul',
            { className: 'active-in' },
            this.props.instance.postingLocationRooms.map(function (room, idx) {
              return _react2.default.createElement(
                'li',
                { key: idx },
                _react2.default.createElement(
                  'span',
                  null,
                  room.name
                )
              );
            })
          )
        ),
        _react2.default.createElement(
          'td',
          null,
          _react2.default.createElement(
            'div',
            { className: 'webhookurl-container' },
            _react2.default.createElement(
              'span',
              {
                className: 'webhookurl',
                id: 'webhook-url-' + this.props.id,
                'data-value': this.webhookurl
              },
              this.webhookurl
            ),
            this.state.enableCopy ? _react2.default.createElement(
              'a',
              {
                href: '#',
                'data-copytarget': '#webhook-url-' + this.props.id,
                onClick: this.onCopyURL
              },
              'Copy URL'
            ) : _react2.default.createElement(
              'a',
              {
                href: '#',
                'data-copytarget': '#webhook-url-' + this.props.id
              },
              'Copy URL'
            )
          )
        ),
        _react2.default.createElement(
          'td',
          null,
          _react2.default.createElement(
            'span',
            null,
            this.props.instance.lastPosted
          )
        ),
        _react2.default.createElement(
          'td',
          null,
          _react2.default.createElement(
            'ul',
            null,
            _react2.default.createElement(
              'li',
              null,
              _react2.default.createElement(
                'a',
                { href: '#', onClick: this.onClickEdit },
                'Edit'
              )
            ),
            _react2.default.createElement(
              'li',
              null,
              _react2.default.createElement(
                'a',
                { href: '#', onClick: this.onClickRemove },
                'Remove'
              )
            )
          )
        )
      );
    }
  }]);

  return DataRow;
}(_react.Component);

DataRow.propTypes = {
  appName: _react.PropTypes.string.isRequired,
  instance: _react.PropTypes.shape({
    name: _react.PropTypes.string.isRequired,
    streamType: _react.PropTypes.string.isRequired,
    instanceId: _react.PropTypes.string.isRequired,
    baseWebHookURL: _react.PropTypes.string.isRequired,
    postingLocationRooms: _react.PropTypes.arrayOf(_react.PropTypes.object),
    lastPosted: _react.PropTypes.string.isRequired
  }),
  id: _react.PropTypes.number.isRequired,
  onClickEdit: _react.PropTypes.func.isRequired,
  onClickRemove: _react.PropTypes.func.isRequired
};

DataRow.defaultProps = {
  appName: ''
};

exports.default = DataRow;