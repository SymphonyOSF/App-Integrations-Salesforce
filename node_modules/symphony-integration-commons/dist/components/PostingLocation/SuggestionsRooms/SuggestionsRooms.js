'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuggestionsRooms = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RoomBox = require('../RoomBox/RoomBox');

var _RoomBox2 = _interopRequireDefault(_RoomBox);

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-unused-prop-types */


// Use named export for unconnected component (for tests)
var SuggestionsRooms = exports.SuggestionsRooms = function (_Component) {
  _inherits(SuggestionsRooms, _Component);

  function SuggestionsRooms(props) {
    _classCallCheck(this, SuggestionsRooms);

    var _this = _possibleConstructorReturn(this, (SuggestionsRooms.__proto__ || Object.getPrototypeOf(SuggestionsRooms)).call(this, props));

    _this.state = {
      filters: [], // stores the room filtered
      filteredRooms: [], // rooms that appears according to user typing
      suggestionsList: [], // rooms available to be filtered
      listening: false, // check if input search has event listener
      focused: -1, // handles list items focus,
      filled: false,
      clear: false };
    _this.container = null;
    _this.input = null;
    _this.list = null;
    _this.onChangeSearch = _this.onChangeSearch.bind(_this);
    _this.inputListener = _this.inputListener.bind(_this);
    _this.addInputListener = _this.addInputListener.bind(_this);
    _this.removeInputListener = _this.removeInputListener.bind(_this);
    _this.clearInput = _this.clearInput.bind(_this);
    _this.addFilter = _this.addFilter.bind(_this);
    _this.removeFilter = _this.removeFilter.bind(_this);
    _this.sort = _this.sort.bind(_this);
    return _this;
  }

  _createClass(SuggestionsRooms, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      var _suggestions = this.props.userRooms.slice();
      this.sort(_suggestions, 'name');
      if (this.props.filters.length > 0) {
        var rooms = []; // store the indexes to be removed
        this.props.filters.map(function (_filter) {
          // store the _suggestions array indexes that are posting locations
          for (var k = 0, n = _suggestions.length; k < n; k += 1) {
            if (_suggestions[k].threadId === _filter.threadId) {
              rooms.push(k);
            }
          }
          // remove all posting locations from the _suggestions array
          for (var i = 0, _n = _suggestions.length; i < _n; i += 1) {
            for (var j = 0, l = rooms.length; j < l; j += 1) {
              if (i === rooms[j]) {
                _suggestions.splice(i, 1);
                rooms.splice(j, 1);
                for (var _k = 0, s = rooms.length; _k < s; _k += 1) {
                  rooms[_k] -= 1;
                }
                i -= 1;
                break;
              }
            }
          }
        });
        this.setState({
          filters: this.props.filters.slice(),
          suggestionsList: _suggestions.slice()
        });
        this.props.resetPostingLocation();
        // add the posting locations to the instance stream state
        this.props.filters.map(function (item) {
          return _this2.props.addStreamToInstance(item);
        });
      } else {
        this.setState({
          suggestionsList: _suggestions
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.input.focus();
    }
  }, {
    key: 'onChangeSearch',
    value: function onChangeSearch(e) {
      var target = e.target;
      if (target.value === '') {
        this.setState({
          filteredRooms: [],
          filled: false,
          clear: false
        });
        if (this.state.listening) {
          this.removeInputListener();
        }
        return;
      }
      var suggestionsList = this.state.suggestionsList;
      suggestionsList = suggestionsList.filter(function (item) {
        return item.name.toLowerCase().search(e.target.value.toLowerCase()) !== -1;
      });
      if (!this.state.listening) {
        this.addInputListener();
      }
      this.setState({
        filteredRooms: suggestionsList,
        clear: true
      });
    }
  }, {
    key: 'inputListener',
    value: function inputListener(event) {
      var _this3 = this;

      var idx = this.state.focused;
      var key = event.keyCode;

      // limit case 1: Focus is on input and key is arrow up: return...
      if (idx === -1 && key === 38) {
        setTimeout(function () {
          _this3.input.value = _this3.input.value;
          _this3.input.focus();
        }, 10);
        return;
      }

      // limit case 2: Focus is on the last list item, and key is arrow down: return...
      if (idx === this.state.filteredRooms.length - 1 && key === 40) {
        return;
      }

      // Focus is on input and key is arrow down
      if (idx === -1 && key === 40) {
        this.input.blur();
        this.removeInputListener();
        this.list.addEventListener('keydown', this.inputListener);
        idx += 1;
      } else if (idx === 0) {
        // Focus is on the first list item
        // key is arrow up
        if (key === 38) {
          // setInterval put the cursor after the input value...
          var tmr = setInterval(function () {
            if (_this3.input.value !== '') {
              clearInterval(tmr);
              _this3.input.focus();
            }
          }, 50);
          this.list.removeEventListener('keydown', this.inputListener);
          this.addInputListener();
          idx -= 1;
        } else if (key === 40) {
          // key is arrow down
          idx += 1;
        }
      } else if (idx > 0) {
        // Focus is on any list item, except the first and last...
        if (key === 38) {
          idx -= 1;
        } else if (key === 40) {
          idx += 1;
        }
      }

      // Handles focus change
      if (this.state.filteredRooms.length > 0 && idx >= 0) {
        this.list.childNodes[idx].childNodes[0].focus();
      }

      // Update state
      this.setState({
        focused: idx
      });
    }
  }, {
    key: 'addInputListener',
    value: function addInputListener() {
      this.input.addEventListener('keydown', this.inputListener);
      this.setState({
        listening: true
      });
    }
  }, {
    key: 'removeInputListener',
    value: function removeInputListener() {
      this.input.removeEventListener('keydown', this.inputListener);
      this.setState({
        listening: false
      });
    }
  }, {
    key: 'clearInput',
    value: function clearInput() {
      this.setState({
        filteredRooms: [],
        focused: -1,
        clear: false
      });
      this.input.value = '';
      this.input.focus();
    }
  }, {
    key: 'addFilter',
    value: function addFilter(e, filter) {
      e.preventDefault();
      var suggestions = this.state.suggestionsList.slice();
      var postingLocationRoom = void 0;
      suggestions.some(function (item, idx) {
        if (item.name === filter.name) {
          postingLocationRoom = suggestions.splice(idx, 1)[0];
        }
      });

      this.setState({
        filteredRooms: [],
        focused: -1,
        filters: this.state.filters.concat([filter]),
        suggestionsList: suggestions.slice(),
        filled: true
      });
      this.props.addStreamToInstance(postingLocationRoom);
      this.input.value = '';
      this.input.focus();
    }
  }, {
    key: 'removeFilter',
    value: function removeFilter(_id) {
      var suggestions = this.state.suggestionsList.slice();
      var _filters = this.state.filters.slice();
      var required = true;
      var postingLocationRoom = void 0;
      _filters.some(function (item, idx) {
        if (item.threadId === _id) {
          suggestions.push(item);
          postingLocationRoom = item;
          _filters.splice(idx, 1);
        }
      });

      this.sort(suggestions, 'name');
      this.input.value = '';
      this.input.focus();
      required = _filters.length > 0;
      this.setState({
        suggestionsList: suggestions.slice(),
        filters: _filters.slice(),
        filled: required
      });
      this.props.removeStreamFromInstance(postingLocationRoom);
    }
  }, {
    key: 'sort',
    value: function sort(_obj, key) {
      _obj.sort(function (a, b) {
        if (a[key] < b[key]) return -1;
        if (a[key] > b[key]) return 1;
        return 0;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      return _react2.default.createElement(
        'div',
        { className: 'suggestions-rooms' },
        _react2.default.createElement(
          'div',
          { className: 'required' },
          _react2.default.createElement(
            'div',
            { className: 'input-search-container' },
            _react2.default.createElement('input', {
              type: 'text',
              onChange: this.onChangeSearch,
              ref: function ref(input) {
                _this4.input = input;
              },
              placeholder: this.props.loading ? 'Loading...' : 'Search rooms'
            }),
            _react2.default.createElement(
              'button',
              {
                className: this.state.clear ? 'visible' : 'hidden',
                onClick: this.clearInput
              },
              _react2.default.createElement('i', { className: 'fa fa-times' })
            )
          ),
          !this.state.filled && _react2.default.createElement(
            'span',
            { id: 'rooms-required-field' },
            _react2.default.createElement('i', { className: 'fa fa-asterisk', 'aria-hidden': 'true' })
          )
        ),
        _react2.default.createElement(
          'ul',
          {
            className: 'filter-container',
            ref: function ref(list) {
              _this4.list = list;
            }
          },
          this.state.filteredRooms.map(function (filter, idx) {
            return _react2.default.createElement(
              'li',
              { className: 'filter-box', key: idx },
              _react2.default.createElement(
                'a',
                {
                  href: '#',
                  className: 'filter-box-clickable',
                  onClick: function onClick(e) {
                    return _this4.addFilter(e, filter, idx);
                  },
                  id: idx
                },
                _react2.default.createElement(
                  'div',
                  null,
                  _react2.default.createElement(
                    'span',
                    null,
                    filter.name
                  ),
                  !filter.publicRoom && _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement('i', { className: 'fa fa-lock' })
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'room-info' },
                  _react2.default.createElement(
                    'span',
                    null,
                    filter.memberCount + ' Member' + (filter.memberCount > 1 ? 's' : '') + ',\n                         created by ' + filter.creatorPrettyName
                  )
                )
              )
            );
          })
        ),
        this.state.filters.length > 0 && this.state.filters.map(function (room, idx) {
          return _react2.default.createElement(_RoomBox2.default, {
            key: idx,
            name: room.name,
            threadId: room.threadId,
            'public': room.publicRoom,
            memberCount: room.memberCount,
            creatorPrettyName: room.creatorPrettyName,
            removeFilter: _this4.removeFilter
          });
        })
      );
    }
  }]);

  return SuggestionsRooms;
}(_react.Component);

SuggestionsRooms.propTypes = {
  addStreamToInstance: _react.PropTypes.func.isRequired,
  removeStreamFromInstance: _react.PropTypes.func.isRequired,
  resetPostingLocation: _react.PropTypes.func.isRequired,
  userRooms: _react.PropTypes.arrayOf(_react.PropTypes.object).isRequired,
  filters: _react.PropTypes.arrayOf(_react.PropTypes.object)
};

SuggestionsRooms.defaultProps = {
  filters: []
};

exports.default = SuggestionsRooms;