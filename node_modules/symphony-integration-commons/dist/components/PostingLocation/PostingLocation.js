'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostingLocation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SuggestionsRoomsContainer = require('./SuggestionsRooms/SuggestionsRoomsContainer');

var _SuggestionsRoomsContainer2 = _interopRequireDefault(_SuggestionsRoomsContainer);

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Use named export for unconnected component (for tests)
var PostingLocation = exports.PostingLocation = function (_Component) {
  _inherits(PostingLocation, _Component);

  function PostingLocation(props) {
    _classCallCheck(this, PostingLocation);

    var _this = _possibleConstructorReturn(this, (PostingLocation.__proto__ || Object.getPrototypeOf(PostingLocation)).call(this, props));

    _this.state = {
      suggestions: false
    };
    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  _createClass(PostingLocation, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.instance.instanceId !== null && this.props.streamType === 'CHATROOM') {
        this.setState({
          suggestions: true
        });
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(e) {
      this.setState({
        suggestions: e.target.id !== 'IM'
      });
      this.props.switchStreamType(e.target.id === 'IM' ? 'IM' : 'CHATROOM');
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'wrapper posting-location' },
        _react2.default.createElement(
          'header',
          null,
          _react2.default.createElement(
            'h2',
            null,
            'Active In'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'radio-group' },
          _react2.default.createElement(
            'div',
            { className: 'radio' },
            _react2.default.createElement('input', {
              type: 'radio',
              id: 'IM',
              name: 'posting',
              onChange: this.onChange,
              checked: this.props.streamType === 'IM'
            }),
            _react2.default.createElement(
              'label',
              { htmlFor: 'IM' },
              'New one-on-one chat'
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'radio' },
            _react2.default.createElement('input', {
              type: 'radio',
              id: 'chat-room',
              name: 'posting',
              onChange: this.onChange,
              checked: this.props.streamType === 'CHATROOM'
            }),
            _react2.default.createElement(
              'div',
              { className: 'chat-room-info' },
              _react2.default.createElement(
                'label',
                { htmlFor: 'chat-room' },
                'Existing chat room'
              ),
              _react2.default.createElement(
                'p',
                null,
                'You can only add this integration to a room of which you are an owner. You can choose one or more rooms.'
              )
            )
          )
        ),
        this.state.suggestions && _react2.default.createElement(_SuggestionsRoomsContainer2.default, null)
      );
    }
  }]);

  return PostingLocation;
}(_react.Component);

PostingLocation.propTypes = {
  streamType: _react.PropTypes.string.isRequired,
  instance: _react.PropTypes.shape(),
  switchStreamType: _react.PropTypes.func.isRequired
};

exports.default = PostingLocation;