'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactRedux = require('react-redux');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actions = require('../../actions');

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import Spinner from '../Spinner/Spinner';
/* eslint-disable react/no-unused-prop-types */


var InputDescription = function (_Component) {
  _inherits(InputDescription, _Component);

  function InputDescription(props) {
    _classCallCheck(this, InputDescription);

    var _this = _possibleConstructorReturn(this, (InputDescription.__proto__ || Object.getPrototypeOf(InputDescription)).call(this, props));

    _this.state = {
      filled: false
    };
    _this.onChangeText = _this.onChangeText.bind(_this);
    return _this;
  }

  _createClass(InputDescription, [{
    key: 'onChangeText',
    value: function onChangeText(e) {
      if (e !== '') {
        this.setState({
          filled: true
        });
      } else {
        this.setState({
          filled: false
        });
      }
      this.props.handleChange(e);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        { className: 'wrapper input-description' },
        _react2.default.createElement(
          'header',
          null,
          _react2.default.createElement(
            'h2',
            null,
            _react2.default.createElement(
              'label',
              { htmlFor: 'input-description' },
              'Description'
            )
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement('input', {
            type: 'text',
            className: 'text-input',
            id: 'input-description',
            placeholder: 'Add a short description here',
            onChange: function onChange(e) {
              _this2.onChangeText(e.target.value);
            },
            defaultValue: this.props.name,
            autoFocus: true
          }),
          !this.state.filled && _react2.default.createElement(
            'span',
            { id: 'description-required-field' },
            _react2.default.createElement('i', { className: 'fa fa-asterisk', 'aria-hidden': 'true' })
          )
        )
      );
    }
  }]);

  return InputDescription;
}(_react.Component);

InputDescription.propTypes = {
  name: _react.PropTypes.string.isRequired,
  handleChange: _react.PropTypes.func.isRequired,
  loading: _react.PropTypes.bool.isRequired
};

var mapStateToProps = function mapStateToProps(state) {
  return {
    name: state.instance.name,
    loading: state.instance.loading
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    handleChange: function handleChange(value) {
      return dispatch((0, _actions.changeInstanceName)(value));
    }
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(InputDescription);