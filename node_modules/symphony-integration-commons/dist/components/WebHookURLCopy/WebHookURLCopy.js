'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _utils = require('../../js/utils.service');

require('./styles/styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebHookURLCopy = function (_Component) {
  _inherits(WebHookURLCopy, _Component);

  function WebHookURLCopy(props) {
    _classCallCheck(this, WebHookURLCopy);

    var _this = _possibleConstructorReturn(this, (WebHookURLCopy.__proto__ || Object.getPrototypeOf(WebHookURLCopy)).call(this, props));

    _this.state = {
      enableCopy: true
    };
    _this.webhookurl = _this.props.baseWebHookURL + '/' + _this.props.instanceId;
    _this.onCopyURL = _this.onCopyURL.bind(_this);
    return _this;
  }

  _createClass(WebHookURLCopy, [{
    key: 'onCopyURL',
    value: function onCopyURL(e) {
      var _this2 = this;

      var target = e.target;
      this.setState({
        enableCopy: false
      });
      e.preventDefault();
      // callback function called from copyToClipboard
      var cb = function cb(value) {
        if (value) {
          _this2.setState({
            enableCopy: true
          });
        }
      };
      (0, _utils.copyToClipboard)(target, cb);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'wrapper webhook-url-container' },
        _react2.default.createElement(
          'header',
          null,
          _react2.default.createElement(
            'h2',
            null,
            _react2.default.createElement(
              'label',
              { htmlFor: 'webhook-url' },
              'Webhook URL'
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'webhook-content' },
          _react2.default.createElement('input', {
            id: 'webhook-url-' + this.props.instanceId,
            type: 'text',
            defaultValue: this.webhookurl,
            disabled: 'disabled',
            'data-value': this.webhookurl
          }),
          this.state.enableCopy ? _react2.default.createElement(
            'a',
            {
              href: '#',
              'data-copytarget': '#webhook-url-' + this.props.instanceId,
              onClick: this.onCopyURL
            },
            'Copy URL'
          ) : _react2.default.createElement(
            'a',
            {
              href: '#',
              'data-copytarget': '#webhook-url-' + this.props.instanceId
            },
            'Copy URL'
          )
        )
      );
    }
  }]);

  return WebHookURLCopy;
}(_react.Component);

WebHookURLCopy.propTypes = {
  instanceId: _react.PropTypes.string.isRequired,
  baseWebHookURL: _react.PropTypes.string.isRequired
};

var mapStateToProps = function mapStateToProps(state) {
  return {
    instanceId: state.instance.instanceId,
    baseWebHookURL: state.instance.baseWebHookURL
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps)(WebHookURLCopy);