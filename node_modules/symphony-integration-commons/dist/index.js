'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = exports.register = exports.RemoveView = exports.InstanceCreated = exports.EditView = exports.CreateView = exports.Home = exports.sendWelcomeMessage = exports.removeInstance = exports.editInstance = exports.saveInstance = exports.createIM = exports.addMembership = exports.getList = exports.getRooms = exports.getUserId = exports.WebHookURLCopy = exports.TableInstance = exports.WebHookURL = exports.SubmitInstance = exports.Spinner = exports.PostingLocationInfo = exports.PostingLocation = exports.MessageBox = exports.IntegrationHeader = exports.InputDescriptionInfo = exports.InputDescription = exports.ConfigureNew = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRedux = require('react-redux');

var _utils = require('./js/utils.service');

var _configureStore = require('./store/configureStore');

var _configureStore2 = _interopRequireDefault(_configureStore);

var _config = require('./js/config.service');

var _config2 = _interopRequireDefault(_config);

require('./vendors/font-awesome-4.6.3/css/font-awesome.min.css');

var _apiCalls = require('./sagas/apiCalls');

var _ConfigureNew = require('./components/ConfigureNew/ConfigureNew');

var _ConfigureNew2 = _interopRequireDefault(_ConfigureNew);

var _InputDescription = require('./components/InputDescription/InputDescription');

var _InputDescription2 = _interopRequireDefault(_InputDescription);

var _InputDescriptionInfo = require('./components/InputDescriptionInfo/InputDescriptionInfo');

var _InputDescriptionInfo2 = _interopRequireDefault(_InputDescriptionInfo);

var _IntegrationHeader = require('./components/IntegrationHeader/IntegrationHeader');

var _IntegrationHeader2 = _interopRequireDefault(_IntegrationHeader);

var _MessageBox = require('./components/MessageBox/MessageBox');

var _MessageBox2 = _interopRequireDefault(_MessageBox);

var _PostingLocationContainer = require('./components/PostingLocation/PostingLocationContainer');

var _PostingLocationContainer2 = _interopRequireDefault(_PostingLocationContainer);

var _PostingLocationInfo = require('./components/PostingLocationInfo/PostingLocationInfo');

var _PostingLocationInfo2 = _interopRequireDefault(_PostingLocationInfo);

var _Spinner = require('./components/Spinner/Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _SubmitInstanceContainer = require('./components/SubmitInstance/SubmitInstanceContainer');

var _SubmitInstanceContainer2 = _interopRequireDefault(_SubmitInstanceContainer);

var _TableInstanceContainer = require('./components/TableInstance/TableInstanceContainer');

var _TableInstanceContainer2 = _interopRequireDefault(_TableInstanceContainer);

var _WebHookURLCopy = require('./components/WebHookURLCopy/WebHookURLCopy');

var _WebHookURLCopy2 = _interopRequireDefault(_WebHookURLCopy);

var _Home = require('./views/Home');

var _Home2 = _interopRequireDefault(_Home);

var _CreateView = require('./views/CreateView');

var _CreateView2 = _interopRequireDefault(_CreateView);

var _EditView = require('./views/EditView');

var _EditView2 = _interopRequireDefault(_EditView);

var _InstanceCreated = require('./views/InstanceCreated');

var _InstanceCreated2 = _interopRequireDefault(_InstanceCreated);

var _RemoveView = require('./views/RemoveView');

var _RemoveView2 = _interopRequireDefault(_RemoveView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Export Components

// Components
/* eslint-disable no-unused-vars */
var ConfigureNew = exports.ConfigureNew = _ConfigureNew2.default;
// Views
var InputDescription = exports.InputDescription = _InputDescription2.default;
var InputDescriptionInfo = exports.InputDescriptionInfo = _InputDescriptionInfo2.default;
var IntegrationHeader = exports.IntegrationHeader = _IntegrationHeader2.default;
var MessageBox = exports.MessageBox = _MessageBox2.default;
var PostingLocation = exports.PostingLocation = _PostingLocationContainer2.default;
var PostingLocationInfo = exports.PostingLocationInfo = _PostingLocationInfo2.default;
var Spinner = exports.Spinner = _Spinner2.default;
var SubmitInstance = exports.SubmitInstance = _SubmitInstanceContainer2.default;
var WebHookURL = exports.WebHookURL = _WebHookURLCopy2.default;

var TableInstance = exports.TableInstance = _TableInstanceContainer2.default;
var WebHookURLCopy = exports.WebHookURLCopy = _WebHookURLCopy2.default;
// Export Services
var getUserId = exports.getUserId = _apiCalls.getUserId;
var getRooms = exports.getRooms = _apiCalls.getRooms;
var getList = exports.getList = _apiCalls.getList;
var addMembership = exports.addMembership = _apiCalls.addMembership;
var createIM = exports.createIM = _apiCalls.createIM;
var saveInstance = exports.saveInstance = _apiCalls.saveInstance;
var editInstance = exports.editInstance = _apiCalls.editInstance;
var removeInstance = exports.removeInstance = _apiCalls.removeInstance;
var sendWelcomeMessage = exports.sendWelcomeMessage = _apiCalls.sendWelcomeMessage;

// Export Views
var Home = exports.Home = _Home2.default;
var CreateView = exports.CreateView = _CreateView2.default;
var EditView = exports.EditView = _EditView2.default;
var InstanceCreated = exports.InstanceCreated = _InstanceCreated2.default;
var RemoveView = exports.RemoveView = _RemoveView2.default;

var params = {
  appId: _utils.Utils.getParameterByName('id'),
  configurationId: _utils.Utils.getParameterByName('configurationId'),
  botUserId: _utils.Utils.getParameterByName('botUserId'),
  context: _utils.Utils.getParameterByName('context') ? '/' + _utils.Utils.getParameterByName('context') : '',
  host: window.location.protocol + '//' + window.location.hostname + ':' + window.location.port
};

var dependencies = ['ui', 'extended-user-service', 'modules', 'applications-nav', 'account', 'stream-service', 'integration-config'];

/*
* register                                  register application on symphony client
* @params       SYMPHONY                    global variable SYMPHONY returned from SYMPHONY api
* @params       appTitle                    title that should be shown on title bar
* @return       SYMPHONY.remote.hello       returns a SYMPHONY remote hello service.
*/
var register = exports.register = function register(SYMPHONY, appTitle) {
  // create our own service
  var listService = SYMPHONY.services.register(params.appId + ':controller');
  function registerApplication() {
    // system services
    var uiService = SYMPHONY.services.subscribe('ui');
    var modulesService = SYMPHONY.services.subscribe('modules');

    uiService.registerExtension('app-settings', params.appId, params.appId + ':controller', { label: 'Configure' });

    listService.implement({
      trigger: function trigger() {
        var url = [params.host + params.context + '/app.html', '?configurationId=' + params.configurationId, '&botUserId=' + params.botUserId, '&id=' + params.appId];

        // invoke the module service to show our own application in the grid
        modulesService.show(params.appId, { title: appTitle }, params.appId + ':controller', url.join(''), { canFloat: true });
      }
    });
  }

  function helloController() {
    SYMPHONY.application.register(params.appId, dependencies, [params.appId + ':controller']).then(registerApplication);
  }
  return SYMPHONY.remote.hello().then(helloController);
};

/*
* connect         connects the application on symphony client
* @param          SYMPHONY          Global SYMPHONY object (Required)
* @param          config            custom parameters for each integration. (Required)
* @param          Routes            default, or custom, routes file (Required)
* @param          elem              HTML DOM element where to render the configurator (Required)
* @param          Instructions      react dom for custom setup instructions (Optional)
*/
var connect = exports.connect = function connect(SYMPHONY, config, Routes, elem, Instructions) {
  function loadApplication() {
    _config2.default.setParams(config);
    _config2.default.setInstructions(Instructions);
    var store = (0, _configureStore2.default)();
    (0, _reactDom.render)(_react2.default.createElement(
      _reactRedux.Provider,
      { store: store },
      _react2.default.createElement(Routes, null)
    ), elem);
  }

  var themeColor = void 0,
      themeSize = void 0;

  function connectApplication() {
    var uiService = SYMPHONY.services.subscribe('ui');
    loadApplication();
    // UI: Listen for theme change events
    uiService.listen('themeChangeV2', function () {
      SYMPHONY.remote.hello().then(function (resp) {
        themeColor = resp.themeV2.name;
        themeSize = resp.themeV2.size;
        document.body.className = 'symphony-external-app ' + themeColor + ' ' + themeSize;
      });
    });
  }

  function helloApplication(data) {
    themeColor = data.themeV2.name;
    themeSize = data.themeV2.size;

    // You must add the symphony-external-app class to the body element
    document.body.className = 'symphony-external-app ' + themeColor + ' ' + themeSize;

    SYMPHONY.application.connect(params.appId, dependencies, [params.appId + ':app']).then(connectApplication);
  }
  return SYMPHONY.remote.hello().then(helloApplication);
};
/* import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
// import Routes from './routes/Routes';
import configureStore from './store/configureStore';
import config from './js/config.service';
// Components
import MessageBoxComponent from './components/MessageBox/MessageBox';
import IntegrationHeaderComponent from './components/IntegrationHeader/IntegrationHeader';
// import SetupInstructionsComponent from './components/SetupInstructions/SetupInstructions';
import ConfigureNewComponent from './components/ConfigureNew/ConfigureNew';
import TableInstanceComponent from './components/TableInstance/TableInstanceContainer';
// Views
import HomeScreen from './views/Home';
import CreateScreen from './views/CreateView';
import EditScreen from './views/EditView';
import InstanceCreatedScreen from './views/InstanceCreated';
import RemoveViewScreen from './views/RemoveView';

// Export Views
export const Home = HomeScreen;
export const CreateView = CreateScreen;
export const EditView = EditScreen;
export const InstanceCreated = InstanceCreatedScreen;
export const RemoveView = RemoveViewScreen;

// Export Components
export const MessageBox = MessageBoxComponent;
export const IntegrationHeader = IntegrationHeaderComponent;
// export const SetupInstructions = SetupInstructionsComponent;
export const ConfigureNew = ConfigureNewComponent;
export const TableInstance = TableInstanceComponent;

export default (params, Routes, Instructions, elem) => {
  config.setParams(params);
  config.setInstructions(Instructions);
  const store = configureStore();
  render(
    <Provider store={store}>
      <Routes />
    </Provider>,
    elem
  );
};*/