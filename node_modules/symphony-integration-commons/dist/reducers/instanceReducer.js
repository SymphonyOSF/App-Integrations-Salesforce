'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-debugger */


var _actions = require('../actions');

var instanceReducer = function instanceReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { saved: false, streamType: 'IM', loading: false };
  var action = arguments[1];

  switch (action.type) {
    case _actions.GET_ACTIVE_INSTANCE_RESETED:
      return action.instance;
    case _actions.CHANGE_INSTANCE_NAME:
      return Object.assign({}, state, _extends({}, state, {
        name: action.name
      }));
    case _actions.CHANGE_STREAM_TYPE:
      return Object.assign({}, state, _extends({}, state, {
        streamType: action.streamType,
        postingLocationRooms: [],
        streams: []
      }));
    case _actions.ADD_STREAM_TO_INSTANCE:
      return Object.assign({}, state, _extends({}, state, {
        postingLocationRooms: state.postingLocationRooms.concat([action.room]),
        streams: state.streams.concat([action.room.threadId])
      }));
    case _actions.REMOVE_STREAM_FROM_INSTANCE:
      return Object.assign({}, state, _extends({}, state, {
        postingLocationRooms: state.postingLocationRooms.filter(function (room) {
          return room.threadId !== action.room.threadId;
        }),
        streams: state.streams.filter(function (item) {
          return item !== action.room.threadId;
        })
      }));
    case _actions.GET_INSTANCE_INFO:
      return Object.assign({}, state, _extends({}, state, {
        name: action.instance.name,
        baseWebHookURL: action.instance.baseWebHookURL,
        instanceId: action.instance.instanceId,
        streamType: action.instance.streamType,
        postingLocationRooms: action.instance.postingLocationRooms.slice(),
        lastPosted: action.instance.lastPosted
      }));
    case _actions.RESET_POSTING_LOCATION_ROOMS:
      return Object.assign({}, state, _extends({}, state, {
        postingLocationRooms: []
      }));
    case _actions.SUCCESSFULLY_CREATED:
      return Object.assign({}, state, _extends({}, state, {
        name: action.instance.name,
        creatorId: action.instance.creatorId,
        instanceId: action.instance.instanceId,
        streamType: action.instance.streamType,
        streams: action.instance.streams.slice(),
        lastPosted: action.instance.lastPosted,
        saved: true,
        loading: false
      }));
    case _actions.SUCCESSFULLY_UPDATED:
    case _actions.SUCCESSFULLY_REMOVED:
      return Object.assign({}, state, _extends({}, state, {
        saved: true,
        loading: false
      }));
    case _actions.CALL_SAVE_INSTANCE:
      return Object.assign({}, state, _extends({}, state, {
        loading: true
      }));
    case _actions.FAILED_OPERATION:
      return Object.assign({}, state, _extends({}, state, {
        saved: null,
        loading: false
      }));
    default:
      return state;
  }
};

exports.default = instanceReducer;