'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actions = require('../actions');

var messages = function messages() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { appName: '', type: '', text: [] };
  var action = arguments[1];

  switch (action.type) {
    case _actions.GET_APP_PARAMS:
      return Object.assign({}, state, _extends({}, state, {
        appName: action.params.appName
      }));
    case _actions.SUCCESSFULLY_CREATED:
      return Object.assign({}, state, {
        type: 'success',
        text: [_actions.SUCCESSFULLY_CREATED_MESSAGE.replace(/#INTEGRATION_NAME/g, state.appName)]
      });
    case _actions.SUCCESSFULLY_UPDATED:
      return Object.assign({}, state, {
        type: 'success',
        text: [_actions.SUCCESSFULLY_UPDATED_MESSAGE.replace(/#INTEGRATION_NAME/g, state.appName)]
      });
    case _actions.SUCCESSFULLY_REMOVED:
      return Object.assign({}, state, {
        type: 'success',
        text: [_actions.SUCCESSFULLY_REMOVED_MESSAGE.replace(/#INTEGRATION_NAME/g, state.appName)]
      });
    case _actions.REQUIRED_ROOMS:
      return Object.assign({}, state, {
        type: 'warning',
        text: function () {
          if (state.text.filter(function (msg) {
            return msg === _actions.ROOMS_IS_REQUIRED;
          }).length > 0) {
            return state.text.slice();
          }
          return state.text.concat([_actions.ROOMS_IS_REQUIRED]);
        }()
      });
    case _actions.REQUIRED_NAME:
      return Object.assign({}, state, {
        type: 'warning',
        text: function () {
          if (state.text.filter(function (msg) {
            return msg === _actions.NAME_IS_REQUIRED;
          }).length > 0) {
            return state.text.slice();
          }
          return state.text.concat([_actions.NAME_IS_REQUIRED]);
        }()
      });
    case _actions.HIDE_REQUIRE_NAME:
      return Object.assign({}, state, {
        type: function () {
          var _type = '';
          if (state.text.filter(function (msg) {
            return msg !== _actions.NAME_IS_REQUIRED;
          }).length > 0) {
            _type = 'warning';
          }
          return _type;
        }(),
        text: function () {
          var _text = [];
          if (state.text.filter(function (msg) {
            return msg !== _actions.NAME_IS_REQUIRED;
          }).length > 0) {
            _text = state.text.filter(function (msg) {
              return msg !== _actions.NAME_IS_REQUIRED;
            });
          }
          return _text;
        }()
      });
    case _actions.HIDE_REQUIRE_ROOMS:
      return Object.assign({}, state, {
        type: function () {
          var _type = '';
          if (state.text.filter(function (msg) {
            return msg !== _actions.ROOMS_IS_REQUIRED;
          }).length > 0) {
            _type = 'warning';
          }
          return _type;
        }(),
        text: function () {
          var _text = [];
          if (state.text.filter(function (msg) {
            return msg !== _actions.ROOMS_IS_REQUIRED;
          }).length > 0) {
            _text = state.text.filter(function (msg) {
              return msg !== _actions.ROOMS_IS_REQUIRED;
            });
          }
          return _text;
        }()
      });
    case _actions.RESET_MESSAGE:
      return Object.assign({}, state, {
        type: '',
        text: []
      });
    case _actions.NO_INSTANCES_FOUND:
      return Object.assign({}, state, {
        type: 'warning',
        text: [_actions.NO_INSTANCES_FOUND_MESSAGE]
      });
    case _actions.FAILED_OPERATION:
      return Object.assign({}, state, {
        type: 'error',
        text: [_actions.FAILED_OPERATION_MESSAGE]
      });
    default:
      return state;
  }
};

exports.default = messages;